type Book {
  id: ID
  title: String
  ISBN: ISBNNumber
  synopsis: String
  genres: String
  publicationYear: String
  author: [Author]
  publisher: [Publisher]
}

type Author {
  id: ID
  firstName: String
  lastName: String
  country: String
  books: [Book]
}

type Publisher {
  id: ID
  name: String
  foundationYear: Int
  books: [Book]
}

type Query {
  "Return an array with all books"
  books(
    author: String
    publisher: String
    title: String
    publicationYear: String
    min: Int
    max: Int
    order: String
  ): [Book]
  "Return an array with all authors"
  authors: [Author]
  "Return an array with all publishers"
  publishers: [Publisher]
  "Return JUST ONE book"
  oneBook(id: ID!): Book
  "Return JUST ONE author"
  oneAuthor(id: ID!): Author
  "Return JUST ONE publisher"
  onePublisher(id: ID!): Publisher
}

input AuthorInput {
  id: ID
  firstName: String
  lastName: String
  country: String
  books: [BookInput]
}

input BookInput {
  title: String!
  ISBN: ISBNNumber!
  synopsis: String
  genres: String
  publicationYear: String
  author: [AuthorInput]
  publisher: PublisherInput
}

input BookUpdateInput {
  title: String
  ISBN: ISBNNumber
  synopsis: String
  genres: String
  publicationYear: String
  author: [AuthorInput]
  publisher: PublisherInput
}

input PublisherInput {
  id: ID
  name: String
  foundationYear: Int
  books: [BookInput]
}

input LoginAuthor {
  firstName: String
  lastName: String
}

type LoginOutput {
  firstName: String
  lastName: String
  token: String
}

type Mutation {
  "Book creation/update"
  createBook(input: BookInput!): Book
  updateBook(input: BookUpdateInput!, id: ID!): Book
  "Login generate jsonwebtoken"
  login(input: LoginAuthor): LoginOutput
}

scalar ISBNNumber
